<?php

namespace app\api\controller\v1;

/**
 * 评论模块
 * Class Comment
 * @package app\api\controller\v1
 */
class Comment extends Base {

    protected function setUp() {
        //关闭中
        if($GLOBALS['config']['comment']['status'] == 0){
            return $this->error('comment is close');
        }
        return parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function postIndex(){
        $this->checkLogin();
        $res = $this->saveData();
        $code = $res['code'];
        if($code == 1){
            return $this->success($res['data']);
        }else{
            return $this->error($res['msg']);
        }
    }

    public function getIndex(){
        $param = input();
        $where = [
            'rid' => $param['rid'],
            'mid' => $param['mid'],
            'page' => $param['page'],
            'num' => $param['limit'],
            'paging' => 'yes'
        ];

        $page = $param['page'] ? : 1;
        $limit = $param['limit'] ? : 999;
        $order = '';
        $res = model('comment')->listCacheData($where);
        $code = $res['code'];
        if($code == 1){
            $data = [
                'page' => $res['page'],
                'total' => $res['total'],
                'limit' => $res['limit'],
                'list' => $res['list'],
            ];
            return $this->success($data);
        }else{
            return $this->error($res['msg']);
        }

    }

    public function deleteIndex(){
        $this->checkLogin();

        $commentId = input('comment_id');
        if (!$commentId){
            $this->error('缺少参数ID');
        }
        $where = [
            'comment_id' => $commentId,
            'user_id' => cookie('user_id'),
        ];
        $res = model('comment')->delData($where);
        $code = $res['code'];
        if($code == 1){
            return $this->success();
        }else{
            return $this->error($res['msg']);
        }
    }

    protected function saveData() {
        $param = input();

        if($GLOBALS['config']['comment']['verify'] == 1){
            if(!captcha_check($param['verify'])){
                return ['code'=>1002,'msg'=>'验证码错误'];
            }
        }

        if($GLOBALS['config']['comment']['login'] ==1){
            if(empty(cookie('user_id'))){
                return ['code' => 1003, 'msg' => '登录后才可以发表留言'];
            }
            $res = model('User')->checkLogin();
            if($res['code']>1) {
                return ['code' => 1003, 'msg' => '登录后才可以发表留言'];
            }
        }

        if(empty($param['comment_content'])){
            return ['code'=>1004,'msg'=>'留言内容不能为空'];
        }

        $cookie = 'comment_timespan';
        if(!empty(cookie($cookie))){
            return ['code'=>1005,'msg'=>'请不要频繁操作'];
        }

        $pattern = '/[^\x00-\x80]/';
        if(!preg_match($pattern,$param['comment_content'])){
            return ['code'=>1005,'msg'=>'内容必须包含中文,请重新输入'];
        }
        $param['comment_content']= htmlentities(mac_filter_words($param['comment_content']));

        if(!in_array($param['comment_mid'],['1','2','3','8','9'])){
            return ['code'=>1006,'msg'=>'模型mid错误'];
        }

        if(empty(cookie('user_id'))){
            $param['comment_name'] = '游客';
        }
        else{
            $param['comment_name'] = $GLOBALS['user']['user_nick_name'];
            $param['user_id'] = intval(cookie('user_id'));
        }
        $param['comment_name'] = htmlentities($param['comment_name']);

        if($GLOBALS['config']['comment']['audit'] ==1){
            $param['comment_status'] = 0;
        }

        $ip = sprintf('%u',ip2long(request()->ip()));
        if($ip>2147483647){
            $ip=0;
        }
        $param['comment_ip'] = $ip;

        $res = model('Comment')->saveData($param);
        if($res['code']>1){
            return $res;
        }else{
            // 评论成功增加积分
            $config = config('task.comment');
            $add_score=0;
            if ($config['status'] == 1){
                $reword = $config['reward'];
                if ($reword['points'] > 0){
                    $exsPlogsCount = 0;
                    if ($config['reward_num']){
                        $todayTime = strtotime(date('Y-m-d', time()));
                        $toTime = $todayTime + 24 * 3600;
                        $where = [
                            'plog_time' => function($query) use($todayTime, $toTime){
                                $query->where('plog_time', '>=', $todayTime)->where('plog_time', '<', $toTime);
                            },
                            'user_id' => $param['user_id'],
                            'plog_type' => 11
                        ];
                        $exsPlogsCount = model('Plog')->countData($where);
                    }
                    if (empty($config['reward_num']) || $config['reward_num'] > $exsPlogsCount){
                        $user['user_id'] = $GLOBALS['user']['user_id'];
                        $res = model('User')->where($user)->setInc('user_points', $reword['points']);
                        $add_score =$reword['points'];
                        if (false !== $res){
                            //积分日志
                            $plog = [];
                            $plog['user_id'] = $GLOBALS['user']['user_id'];
                            input('user_id', $plog['user_id']);
                            $plog['plog_type'] = 11; // 评论积分奖励
                            $plog['plog_points'] =  $reword['points'];
                            $res = model('Plog')->saveData($plog);
                        }
                    }

                }
            }

            cookie($cookie, 't', $GLOBALS['config']['comment']['timespan']);
            if($GLOBALS['config']['comment']['audit'] ==1){
                $res['msg'] = '谢谢，我们会尽快审核你的评论！';
            }
            else{
                $res['msg'] = '感谢你的评论！';
            }
            return $this->success(['score'=>$add_score]);
        }
    }


}
